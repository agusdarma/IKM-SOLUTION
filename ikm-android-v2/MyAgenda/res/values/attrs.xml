<?xml version="1.0" encoding="utf-8"?>
<resources>
    
    <declare-styleable name="MaterialEditText">
    <!-- The base color of the line and the texts. Default is black. -->
    <attr name="met_baseColor" format="color" />
    <!-- The highlight color of the line, and the floating label if the highlightFloatingLabel is true. -->
    <attr name="met_primaryColor" format="color" />
    <!-- How the floating label should be shown. Default is none -->
    <attr name="met_floatingLabel">
      <enum name="none" value="0" />
      <enum name="normal" value="1" />
      <enum name="highlight" value="2" />
    </attr>
    <!-- The color for when something is wrong.(e.g. exceeding max characters) -->
    <attr name="met_errorColor" format="color" />
    <!-- Min characters count limit. 0 means no limit. -->
    <attr name="met_minCharacters" format="integer" />
    <!-- max Characters count limit. 0 means no limit. -->
    <attr name="met_maxCharacters" format="integer" />
    <!-- Whether to show the bottom ellipsis in singleLine mode -->
    <attr name="met_singleLineEllipsis" format="boolean" />
    <!-- Reserved bottom text lines count, no matter if there is some helper/error text. -->
    <attr name="met_minBottomTextLines" format="integer" />
    <!-- Helper text at the bottom -->
    <attr name="met_helperText" format="string" />
    <!-- Helper text color -->
    <attr name="met_helperTextColor" format="color" />
    <!-- Font of the paint used to draw accent texts -->
    <attr name="met_accentTypeface" format="string" />
    <!-- Font used on view -->
    <attr name="met_typeface" format="string" />
    <!-- Custom float label text -->
    <attr name="met_floatingLabelText" format="string" />
    <!-- spacing between the main text and the floating label -->
    <attr name="met_floatingLabelPadding" format="dimension" />
    <!-- Hide underline -->
    <attr name="met_hideUnderline" format="boolean" />
    <!-- Underline's color -->
    <attr name="met_underlineColor" format="color" />
    <!-- Auto validate -->
    <attr name="met_autoValidate" format="boolean" />
    <!-- Left icon -->
    <attr name="met_iconLeft" format="reference" />
    <!-- Right icon -->
    <attr name="met_iconRight" format="reference" />
    <!-- Padding between icon(s) and the main area. 8dp by default. -->
    <attr name="met_iconPadding" format="dimension" />
    <!-- Clear button -->
    <attr name="met_clearButton" format="boolean" />
    <!-- The floating label's text size. 12sp by default. -->
    <attr name="met_floatingLabelTextSize" format="dimension" />
    <!-- The floating label's text color. -1 by default. -->
    <attr name="met_floatingLabelTextColor" format="color" />
    <!-- The bottom texts' size. 12sp by default. -->
    <attr name="met_bottomTextSize" format="dimension" />
    <!-- Always show the floating label, instead of animating it in/out. False by default. -->
    <attr name="met_floatingLabelAlwaysShown" format="boolean" />
    <!-- Always show the helper text, no matter if the edit text is focused. False by default. -->
    <attr name="met_helperTextAlwaysShown" format="boolean" />
    <!-- Whether use animation to show/hide the floating label. True by default. -->
    <attr name="met_floatingLabelAnimating" format="boolean"/>
    <!-- Text color -->
    <attr name="met_textColor" format="color" />
    <!-- Hint Text Color -->
    <attr name="met_textColorHint" format="color" />
    <!-- Auto validate on focus lost. False by default. -->
    <attr name="met_validateOnFocusLost" format="boolean"/>
    <!-- Whether check the characters count at the beginning it's shown. True by default. -->
    <attr name="met_checkCharactersCountAtBeginning" format="boolean"/>

  </declare-styleable>
    
    <declare-styleable name="MaterialCalendarView">

        <attr name="mcv_dateTextAppearance" format="reference"/>
        <attr name="mcv_weekDayTextAppearance" format="reference"/>
        <attr name="mcv_headerTextAppearance" format="reference"/>

        <attr name="mcv_arrowColor" format="color"/>
        <attr name="mcv_leftArrowMask" format="reference"/>
        <attr name="mcv_rightArrowMask" format="reference"/>
        <attr name="mcv_selectionColor" format="color"/>

        <attr name="mcv_showOtherDates" format="boolean"/>

        <attr name="mcv_weekDayLabels" format="reference" />
        <attr name="mcv_monthLabels" format="reference" />

        <attr name="mcv_tileSize" format="dimension"/>

        <attr name="mcv_firstDayOfWeek" format="enum">
            <enum name="sunday" value="1" />
            <enum name="monday" value="2" />
            <enum name="tuesday" value="3" />
            <enum name="wednesday" value="4" />
            <enum name="thursday" value="5" />
            <enum name="friday" value="6" />
            <enum name="saturday" value="7" />
        </attr>

    </declare-styleable>

    <declare-styleable name="MaterialSpinner">
        <attr name="ms_baseColor" format="integer"/>
        <attr name="ms_highlightColor" format="integer"/>
        <attr name="ms_errorColor" format="integer"/>
        <attr name="ms_error" format="string"/>
        <attr name="ms_hint" format="string"/>
        <attr name="ms_floatingLabelText" format="string"/>
        <attr name="ms_floatingLabelColor" format="color"/>
        <attr name="ms_multiline" format="boolean"/>
        <attr name="ms_nbErrorLines" format="integer"/>
        <attr name="ms_typeface" format="string"/>
        <attr name="ms_alignLabels" format="boolean"/>
        <attr name="ms_thickness" format="dimension"/>
        <attr name="ms_thickness_error" format="dimension"/>
        <attr name="ms_arrowSize" format="dimension"/>
        <attr name="ms_arrowColor" format="color"/>
    </declare-styleable>
    
    <declare-styleable name="ScaledLinearLayout">
        <attr name="linear_layout_ratio" format="float" />
    </declare-styleable>
    <declare-styleable name="MaterialRippleLayout">
        <attr name="rippleColor" format="color" />
        <attr name="rippleDimension" format="dimension" />
        <attr name="rippleOverlay" format="boolean" />
        <attr name="rippleAlpha" format="float" />
        <attr name="rippleDuration" format="integer" />
        <attr name="rippleFadeDuration" format="integer" />
        <attr name="rippleHover" format="boolean" />
        <attr name="rippleBackground" format="color" />
        <attr name="rippleDelayClick" format="boolean" />
        <attr name="ripplePersistent" format="boolean" />
		<attr name="rippleInAdapter" format="boolean"/>
    </declare-styleable>
    <declare-styleable name="ProgressWheel">
        <attr name="text" format="string" />
        <attr name="textColor" format="color" />
        <attr name="textSize" format="dimension" />
        <attr name="barColor" format="color" />
        <attr name="rimColor" format="color" />
        <attr name="rimWidth" format="dimension" />
        <attr name="spinSpeed" format="dimension" />
        <attr name="delayMillis" format="integer" />
        <attr name="circleColor" format="color" />
        <attr name="radius" format="dimension" />
        <attr name="barWidth" format="dimension" />
        <attr name="barLength" format="dimension" />
        <attr name="contourColor" format="color" />
        <attr name="contourSize" format="dimension" />
    </declare-styleable>
    <!-- Commented code below is from old version of
    PullToZoomView library. -->
    <!-- <declare-styleable name="PullToZoomScrollView">
        <attr name="scrollHeadView" format="reference" />
        <attr name="scrollContentView" format="reference" />
        <attr name="scrollZoomView" format="reference" />
    </declare-styleable>
    <declare-styleable name="PullToZoomListView">
        <attr name="listHeadView" format="reference" />
        <attr name="isHeadParallax" format="boolean" />
    </declare-styleable> -->
    <declare-styleable name="PullToZoomView">
        <attr name="headerView" format="reference" />
        <attr name="contentView" format="reference" />
        <attr name="zoomView" format="reference" />
        <attr name="isHeaderParallax" format="boolean" />
    </declare-styleable>
    <item type="id" name="scrollview"/>
    <declare-styleable name="FloatLabeledEditText">
        <attr name="fletFloatingHint" format="string" />
        <attr name="fletSingleLine" format="boolean" />
        <attr name="fletPassword" format="boolean" />
        <attr name="fletTextBackground" format="reference" />
        <attr name="fletTextGravity">
            <flag name="top" value="0x30" />
            <flag name="bottom" value="0x50" />
            <flag name="left" value="0x03" />
            <flag name="right" value="0x05" />
            <flag name="center_vertical" value="0x10" />
            <flag name="fill_vertical" value="0x70" />
            <flag name="center_horizontal" value="0x01" />
            <flag name="fill_horizontal" value="0x07" />
            <flag name="center" value="0x11" />
            <flag name="fill" value="0x77" />
            <flag name="clip_vertical" value="0x80" />
            <flag name="clip_horizontal" value="0x08" />
            <flag name="start" value="0x00800003" />
            <flag name="end" value="0x00800005" />
        </attr>
        <attr name="fletTextLines" format="integer" />
        <attr name="fletHintTextColor" format="reference|color" />
        <attr name="fletTextColor" format="reference|color" />
        <!--
Supply a value for
{@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
used when an input method is connected to the text view.
        -->
        <attr name="fletImeActionLabel" format="string" />
        <!--
Supply a value for
{@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
used when an input method is connected to the text view.
        -->
        <attr name="fletImeActionId" format="integer" />
        <!-- This is taken straight out of AOSP to help propogate down -->
        <attr name="fletInputType">

            <!-- There is no content type. The text is not editable. -->
            <flag name="none" value="0x00000000" />
            <!--
Just plain old text. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.
            -->
            <flag name="text" value="0x00000001" />
            <!--
Can be combined with <var>text</var> and its variations to
request capitalization of all characters. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.
            -->
            <flag name="textCapCharacters" value="0x00001001" />
            <!--
Can be combined with <var>text</var> and its variations to
request capitalization of the first character of every word. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.
            -->
            <flag name="textCapWords" value="0x00002001" />
            <!--
Can be combined with <var>text</var> and its variations to
request capitalization of the first character of every sentence. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.
            -->
            <flag name="textCapSentences" value="0x00004001" />
            <!--
Can be combined with <var>text</var> and its variations to
request auto-correction of text being input. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.
            -->
            <flag name="textAutoCorrect" value="0x00008001" />
            <!--
Can be combined with <var>text</var> and its variations to
specify that this field will be doing its own auto-completion and
talking with the input method appropriately. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.
            -->
            <flag name="textAutoComplete" value="0x00010001" />
            <!--
Can be combined with <var>text</var> and its variations to
allow multiple lines of text in the field. If this flag is not set,
the text field will be constrained to a single line. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.
            -->
            <flag name="textMultiLine" value="0x00020001" />
            <!--
Can be combined with <var>text</var> and its variations to
indicate that though the regular text view should not be multiple
lines, the IME should provide multiple lines if it can. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.
            -->
            <flag name="textImeMultiLine" value="0x00040001" />
            <!--
Can be combined with <var>text</var> and its variations to
indicate that the IME should not show any
dictionary-based word suggestions. Corresponds to
{@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.
            -->
            <flag name="textNoSuggestions" value="0x00080001" />
            <!--
Text that will be used as a URI. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.
            -->
            <flag name="textUri" value="0x00000011" />
            <!--
Text that will be used as an e-mail address. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.
            -->
            <flag name="textEmailAddress" value="0x00000021" />
            <!--
Text that is being supplied as the subject of an e-mail. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.
            -->
            <flag name="textEmailSubject" value="0x00000031" />
            <!--
Text that is the content of a short message. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.
            -->
            <flag name="textShortMessage" value="0x00000041" />
            <!--
Text that is the content of a long message. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.
            -->
            <flag name="textLongMessage" value="0x00000051" />
            <!--
Text that is the name of a person. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.
            -->
            <flag name="textPersonName" value="0x00000061" />
            <!--
Text that is being supplied as a postal mailing address. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.
            -->
            <flag name="textPostalAddress" value="0x00000071" />
            <!--
Text that is a password. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.
            -->
            <flag name="textPassword" value="0x00000081" />
            <!--
Text that is a password that should be visible. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.
            -->
            <flag name="textVisiblePassword" value="0x00000091" />
            <!--
Text that is being supplied as text in a web form. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.
            -->
            <flag name="textWebEditText" value="0x000000a1" />
            <!--
Text that is filtering some other data. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.
            -->
            <flag name="textFilter" value="0x000000b1" />
            <!--
Text that is for phonetic pronunciation, such as a phonetic name
field in a contact entry. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.
            -->
            <flag name="textPhonetic" value="0x000000c1" />
            <!--
Text that will be used as an e-mail address on a web form. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.
            -->
            <flag name="textWebEmailAddress" value="0x000000d1" />
            <!--
Text that will be used as a password on a web form. Corresponds to
{@link android.text.InputType#TYPE_CLASS_TEXT} |
{@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.
            -->
            <flag name="textWebPassword" value="0x000000e1" />
            <!--
A numeric only field. Corresponds to
{@link android.text.InputType#TYPE_CLASS_NUMBER} |
{@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.
            -->
            <flag name="number" value="0x00000002" />
            <!--
Can be combined with <var>number</var> and its other options to
allow a signed number. Corresponds to
{@link android.text.InputType#TYPE_CLASS_NUMBER} |
{@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.
            -->
            <flag name="numberSigned" value="0x00001002" />
            <!--
Can be combined with <var>number</var> and its other options to
allow a decimal (fractional) number. Corresponds to
{@link android.text.InputType#TYPE_CLASS_NUMBER} |
{@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.
            -->
            <flag name="numberDecimal" value="0x00002002" />
            <!--
A numeric password field. Corresponds to
{@link android.text.InputType#TYPE_CLASS_NUMBER} |
{@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.
            -->
            <flag name="numberPassword" value="0x00000012" />
            <!--
For entering a phone number. Corresponds to
{@link android.text.InputType#TYPE_CLASS_PHONE}.
            -->
            <flag name="phone" value="0x00000003" />
            <!--
For entering a date and time. Corresponds to
{@link android.text.InputType#TYPE_CLASS_DATETIME} |
{@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.
            -->
            <flag name="datetime" value="0x00000004" />
            <!--
For entering a date. Corresponds to
{@link android.text.InputType#TYPE_CLASS_DATETIME} |
{@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.
            -->
            <flag name="date" value="0x00000014" />
            <!--
For entering a time. Corresponds to
{@link android.text.InputType#TYPE_CLASS_DATETIME} |
{@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.
            -->
            <flag name="time" value="0x00000024" />
        </attr>
        <!--
Additional features you can enable in an IME associated with an editor
to improve the integration with your application. The constants
here correspond to those defined by
{@link android.view.inputmethod.EditorInfo#imeOptions}.
        -->
        <attr name="fletImeOptions">

            <!-- There are no special semantics associated with this editor. -->
            <flag name="normal" value="0x00000000" />
            <!--
There is no specific action associated with this editor, let the
editor come up with its own if it can.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_NULL}.
            -->
            <flag name="actionUnspecified" value="0x00000000" />
            <!--
This editor has no action associated with it.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.
            -->
            <flag name="actionNone" value="0x00000001" />
            <!--
The action key performs a "go"
operation to take the user to the target of the text they typed.
Typically used, for example, when entering a URL.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.
            -->
            <flag name="actionGo" value="0x00000002" />
            <!--
The action key performs a "search"
operation, taking the user to the results of searching for the text
the have typed (in whatever context is appropriate).
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.
            -->
            <flag name="actionSearch" value="0x00000003" />
            <!--
The action key performs a "send"
operation, delivering the text to its target. This is typically used
when composing a message.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.
            -->
            <flag name="actionSend" value="0x00000004" />
            <!--
The action key performs a "next"
operation, taking the user to the next field that will accept text.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.
            -->
            <flag name="actionNext" value="0x00000005" />
            <!--
The action key performs a "done"
operation, closing the soft input method.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.
            -->
            <flag name="actionDone" value="0x00000006" />
            <!--
The action key performs a "previous"
operation, taking the user to the previous field that will accept text.
Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.
            -->
            <flag name="actionPrevious" value="0x00000007" />
            <!--
Used to request that the IME never go
into fullscreen mode. Applications need to be aware that the flag is not
a guarantee, and not all IMEs will respect it.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.
            -->
            <flag name="flagNoFullscreen" value="0x2000000" />
            <!--
Like flagNavigateNext, but
specifies there is something interesting that a backward navigation
can focus on. If the user selects the IME's facility to backward
navigate, this will show up in the application as an actionPrevious
at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
InputConnection.performEditorAction(int)}.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.
            -->
            <flag name="flagNavigatePrevious" value="0x4000000" />
            <!--
Used to specify that there is something
interesting that a forward navigation can focus on. This is like using
actionNext, except allows the IME to be multiline (with
an enter key) as well as provide forward navigation. Note that some
IMEs may not be able to do this, especially when running on a small
screen where there is little space. In that case it does not need to
present a UI for this option. Like actionNext, if the
user selects the IME's facility to forward navigate, this will show up
in the application at
{@link android.view.inputmethod.InputConnection#performEditorAction(int)
InputConnection.performEditorAction(int)}.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.
            -->
            <flag name="flagNavigateNext" value="0x8000000" />
            <!--
Used to specify that the IME does not need
to show its extracted text UI. For input methods that may be fullscreen,
often when in landscape mode, this allows them to be smaller and let part
of the application be shown behind. Though there will likely be limited
access to the application available from the user, it can make the
experience of a (mostly) fullscreen IME less jarring. Note that when
this flag is specified the IME may <em>not</em> be set up to be able
to display text, so it should only be used in situations where this is
not needed.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.
            -->
            <flag name="flagNoExtractUi" value="0x10000000" />
            <!--
Used in conjunction with a custom action, this indicates that the
action should not be available as an accessory button when the
input method is full-screen.
Note that by setting this flag, there can be cases where the action
is simply never available to the user. Setting this generally means
that you think showing text being edited is more important than the
action you have supplied.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.
            -->
            <flag name="flagNoAccessoryAction" value="0x20000000" />
            <!--
Used in conjunction with a custom action,
this indicates that the action should not be available in-line as
a replacement for the "enter" key. Typically this is
because the action has such a significant impact or is not recoverable
enough that accidentally hitting it should be avoided, such as sending
a message. Note that {@link android.widget.TextView} will
automatically set this flag for you on multi-line text views.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.
            -->
            <flag name="flagNoEnterAction" value="0x40000000" />
            <!--
Used to request that the IME should be capable of inputting ASCII
characters. The intention of this flag is to ensure that the user
can type Roman alphabet characters in a {@link android.widget.TextView}
used for, typically, account ID or password input. It is expected that IMEs
normally are able to input ASCII even without being told so (such IMEs
already respect this flag in a sense), but there could be some cases they
aren't when, for instance, only non-ASCII input languagaes like Arabic,
Greek, Hebrew, Russian are enabled in the IME. Applications need to be
aware that the flag is not a guarantee, and not all IMEs will respect it.
However, it is strongly recommended for IME authors to respect this flag
especially when their IME could end up with a state that has only non-ASCII
input languages enabled.
<p>Corresponds to
{@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.
            -->
            <flag name="flagForceAscii" value="0x80000000" />
        </attr>
    </declare-styleable>
    <declare-styleable name="CircularProgressButton">
        <attr name="cpb_selectorIdle" format="reference" />
        <attr name="cpb_selectorComplete" format="reference" />
        <attr name="cpb_selectorError" format="reference" />
        <attr name="cpb_textComplete" format="string" />
        <attr name="cpb_textIdle" format="string" />
        <attr name="cpb_textError" format="string" />
        <attr name="cpb_textProgress" format="string" />
        <attr name="cpb_colorProgress" format="color" />
        <attr name="cpb_colorIndicator" format="color" />
        <attr name="cpb_colorIndicatorBackground" format="color" />
        <attr name="cpb_iconError" format="reference" />
        <attr name="cpb_iconComplete" format="reference" />
        <attr name="cpb_cornerRadius" format="dimension" />
        <attr name="cpb_paddingProgress" format="dimension" />
    </declare-styleable>
    <declare-styleable name="RobotoTextView">
        <attr name="typeface" format="enum">
            <enum name="robotoBlack" value="0" />
            <enum name="robotoBlackItalic" value="1" />
            <enum name="robotoBold" value="2" />
            <enum name="robotoBoldItalic" value="3" />
            <enum name="robotoBoldCondensed" value="4" />
            <enum name="robotoBoldCondensedItalic" value="5" />
            <enum name="robotoCondensed" value="6" />
            <enum name="robotoCondensedItalic" value="7" />
            <enum name="robotoItalic" value="8" />
            <enum name="robotoLight" value="9" />
            <enum name="robotoLightItalic" value="10" />
            <enum name="robotoMedium" value="11" />
            <enum name="robotoMediumItalic" value="12" />
            <enum name="robotoRegular" value="13" />
            <enum name="robotoThin" value="14" />
            <enum name="robotoThinItalic" value="15" />
        </attr>
    </declare-styleable>
    
    <!-- Shape image view -->
    <attr name="siArrowPosition">
        <enum name="left" value="0" />
        <enum name="right" value="1" />
    </attr>
    <attr name="siBorderType">
        <enum name="stroke" value="0" />
        <enum name="fill" value="1" />
    </attr>
    <attr name="siStrokeCap">
        <enum name="butt" value="0" />
        <enum name="round" value="1" />
        <enum name="square" value="2" />
    </attr>
    <attr name="siStrokeJoin">
        <enum name="bevel" value="0" />
        <enum name="miter" value="1" />
        <enum name="round" value="2" />
    </attr>
    <declare-styleable name="ShaderImageView">
        <attr name="siSquare" format="boolean" />
        <attr name="siBorderColor" format="color" />
        <attr name="siBorderWidth" format="dimension" />
        <attr name="siBorderAlpha" format="float" />
        <attr name="siForeground" format="integer|reference" />
        <!-- Rounded Image View -->
        <attr name="siRadius" format="dimension" />
        <!--BubbleImageView-->
        <attr name="siArrowPosition"/>
        <attr name="siTriangleHeight" format="dimension"/>
        <!--PorterImageView-->
        <attr name="siShape" format="integer|reference" />
        <!--ShaderImageView-->
        <attr name="siBorderType"/>
        <attr name="siStrokeCap"/>
        <attr name="siStrokeJoin"/>
        <attr name="siStrokeMiter" format="dimension" />
    </declare-styleable>

</resources>